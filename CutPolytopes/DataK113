return rec(
  EXT := [ [ 1, 0, 0, 0, 0, 0, 0, 0 ], [ 1, 1, 1, 1, 1, 0, 0, 0 ], [ 1, 0, 1, 1, 1, 1, 1, 1 ], 
      [ 1, 0, 0, 1, 1, 0, 1, 1 ], [ 1, 0, 0, 0, 1, 0, 0, 1 ], [ 1, 0, 1, 0, 1, 1, 0, 1 ], [ 1, 1, 0, 1, 1, 1, 0, 0 ],
      [ 1, 1, 0, 0, 1, 1, 1, 0 ], [ 1, 1, 1, 0, 1, 0, 1, 0 ], [ 1, 1, 0, 0, 0, 1, 1, 1 ], [ 1, 1, 1, 0, 0, 0, 1, 1 ],
      [ 1, 1, 1, 1, 0, 0, 0, 1 ], [ 1, 1, 0, 1, 0, 1, 0, 1 ], [ 1, 0, 1, 0, 0, 1, 0, 0 ], [ 1, 0, 1, 1, 0, 1, 1, 0 ],
      [ 1, 0, 0, 1, 0, 0, 1, 0 ] ],
  GRP := Group( [ ( 8,13)( 9,12), ( 7, 9)(11,13), ( 2, 7)( 8, 9)(10,11)(12,13), ( 5,16)( 6,15), ( 4, 6)(14,16), 
      ( 1, 2)( 3,10)( 4, 8, 6,11,15,13)( 5, 9,14,12,16, 7) ] ),
  LOrb := [ [ 1, 2, 3, 4, 5, 6, 7, 8, 9, 14, 15, 16 ] ],
  eRec := rec(
      GRA := rec(
          adjacencies := [ [ 2, 3, 4, 5 ], [ 1, 3, 4, 5 ], [ 1, 2 ], [ 1, 2 ], [ 1, 2 ] ],
          autGroup := Group( [ (1,2), (4,5), (3,4) ] ),
          group := Group( [ () ] ),
          isGraph := true,
          isSimple := true,
          order := 5,
          representatives := [ 1, 2, 3, 4, 5 ],
          schreierVector := [ -1, -2, -3, -4, -5 ] ),
      GRPcanonic := Group( [ ( 2,10)( 7,11)( 8,12)( 9,13), ( 5,16)( 6,15)( 8,13)( 9,12), 
          ( 4, 6)( 7, 9)(11,13)(14,16), ( 1, 2)( 3,10)( 4,11)( 5,12)( 6,13)( 7,14)( 8,15)( 9,16), 
          ( 1,10)( 2, 3)( 4, 7)( 5, 8)( 6, 9)(11,14)(12,15)(13,16), ( 1,14)( 2, 7)( 3, 4)( 5, 6)( 8, 9)(10,11)(12,13)
            (15,16), ( 1,16)( 2, 9)( 3, 6)( 4, 5)( 7, 8)(10,13)(11,12)(14,15), ( 1, 5)( 2,12)( 3,15)( 4,16)( 6,14)
            ( 7,13)( 8,10)( 9,11) ] ),
      ListEdges := [ [ 1, 2 ], [ 1, 3 ], [ 1, 4 ], [ 1, 5 ], [ 2, 3 ], [ 2, 4 ], [ 2, 5 ] ],
      ListSet := [ [  ], [ 1 ], [ 1, 2 ], [ 1, 2, 3 ], [ 1, 2, 3, 4 ], [ 1, 2, 4 ], [ 1, 3 ], [ 1, 3, 4 ], [ 1, 4 ], 
          [ 2 ], [ 2, 3 ], [ 2, 3, 4 ], [ 2, 4 ], [ 3 ], [ 3, 4 ], [ 4 ] ],
      ListVect := [ [ 1, 0, 0, 0, 0, 0, 0, 0 ], [ 1, 1, 1, 1, 1, 0, 0, 0 ], [ 1, 0, 1, 1, 1, 1, 1, 1 ], 
          [ 1, 0, 0, 1, 1, 0, 1, 1 ], [ 1, 0, 0, 0, 1, 0, 0, 1 ], [ 1, 0, 1, 0, 1, 1, 0, 1 ], 
          [ 1, 1, 0, 1, 1, 1, 0, 0 ], [ 1, 1, 0, 0, 1, 1, 1, 0 ], [ 1, 1, 1, 0, 1, 0, 1, 0 ], 
          [ 1, 1, 0, 0, 0, 1, 1, 1 ], [ 1, 1, 1, 0, 0, 0, 1, 1 ], [ 1, 1, 1, 1, 0, 0, 0, 1 ], 
          [ 1, 1, 0, 1, 0, 1, 0, 1 ], [ 1, 0, 1, 0, 0, 1, 0, 0 ], [ 1, 0, 1, 1, 0, 1, 1, 0 ], 
          [ 1, 0, 0, 1, 0, 0, 1, 0 ] ] ) );
